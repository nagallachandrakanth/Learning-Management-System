
package com.te.lms.entity;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import aurozen.assign.aurozenassign.StringPrefixedSequenceIdGenerator;

import com.te.lms.entity.enums.Status;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Builder
@Entity
public class Batch {

	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "no")
	private Integer no;
	@Id
	 @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "emp_seq")
    @GenericGenerator(name = "emp_seq", strategy = "aurozen.assign.aurozenassign.StringPrefixedSequenceIdGenerator",
            parameters = {
            @Parameter(name = StringPrefixedSequenceIdGenerator.INCREMENT_PARAM, value = "50"),
            @Parameter(name = StringPrefixedSequenceIdGenerator.VALUE_PREFIX_PARAMETER, value = "B_"),
            @Parameter(name = StringPrefixedSequenceIdGenerator.NUMBER_FORMAT_PARAMETER, value = "%05d") })
	@Column(name = "batch_id")
	private long batchId;

	@Column(name = "batch_name")
	private String batchName;

	@Column(name = "mentor_name")
	private String mentorName;

	@Column(name = "technologies")
	@ManyToMany(mappedBy = "batch", cascade = CascadeType.ALL)
	private List<Technologies> technologies = new ArrayList<Technologies>();

	@Column(name = "start_date")
	private LocalDate startDate;

	@Column(name = "end_date")
	private LocalDate endDate;

	@Column(name = "status")
	@Enumerated(EnumType.STRING)
	private Status status;

	/*
	 * @OneToMany(mappedBy = "batch", cascade = CascadeType.ALL) private
	 * List<Mentor> mentor;
	 */

}
